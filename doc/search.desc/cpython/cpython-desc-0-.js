searchState.loadedDescShard("cpython", 0, "Rust bindings to the Python interpreter.\nContains the error value\nGets the Python builtin value <code>False</code>.\nFromPyObject is implemented by various types that can be …\nRAII type that represents the Global Interpreter Lock …\nMutex-like wrapper object for data that is protected by …\nAn empty struct that represents the empty argument list. …\nGets the Python builtin value <code>None</code>.\nGets the Python builtin value <code>NotImplemented</code>.\nOperations on numeric objects\nTrait that contains methods\nContains the success value\nRepresents a Python <code>bool</code>.\nRepresents a Python byte string. Corresponds to <code>str</code> in …\nCapsules are the preferred way to export/import C APIs …\nRepresents a Python <code>dict</code>.\nRepresents a Python exception that was raised.\nRepresents a Python <code>float</code> object.\nIn Python 2.x, represents a Python <code>long</code> object. In Python …\nA python iterator object.\nAn immutably borrowed reference to a leaked value.\nA mutably borrowed reference to a leaked value.\nRepresents a Python <code>list</code>.\nIn Python 2.x, represents a Python <code>long</code> object. In Python …\nRepresents a Python module object.\nAn empty struct that represents <code>None</code> in Python.\nRepresents a reference to a Python object.\nRepresents the result of a Python call.\nRepresents a reference to a python object supporting the …\nRepresents a Python <code>set</code>.\nA reference to <code>PySharedRefCell</code> owned by a Python object.\nA mutable memory location shareable immutably across …\nRepresents a Python string. Corresponds to <code>basestring</code> in …\nEnum of possible Python string representations.\nRepresents a Python tuple object.\nRepresents a reference to a Python type object.\nRepresents a Python string. Corresponds to <code>basestring</code> in …\nMarker type that indicates that the GIL is currently held.\nTrait implemented by all Python object types.\nTrait implemented by Python object types that allow a …\nTrait implemented by Python object types that have a …\nRefFromPyObject is implemented by various types that can …\nConversion trait that allows various objects to be …\nGets the Python builtin value <code>True</code>.\nAn immutable reference to <code>PySharedRefCell</code> value, not bound …\nReturn the absolute value of self, equivalent to calling …\nReturn the absolute value of self, equivalent to calling …\nAcquires the global interpreter lock, which allows access …\nAcquires the global interpreter lock, which allows access …\nPerform addition (self + other)\nPerform addition (self + other)\nAdds a member to the module.\nAdd a value. This is equivalent to the Python expression …\nAdds a new extension type to the module.\nTemporarily releases the GIL, thus allowing other Python …\nAppends an item to the end of the list\nThis module contains logic for parsing a python argument …\nCasts the Python object to PyObject.\nGets the Python iterator object.\nGets the underlying FFI pointer. Returns a borrowed …\nRetrieves the underlying FFI pointer associated with this …\nRetrieve Python instance under the assumption that the GIL …\nPerform the “bitwise and” of <code>self &amp; other</code>\nPerform the “bitwise and” of <code>self &amp; other</code>\nPerform the bitwise negation of self, equivalent to the …\nPerform the bitwise negation of self, equivalent to the …\nPerform the “bitwise or” of <code>self | other</code>\nPerform the “bitwise or” of <code>self | other</code>\nPerform the “bitwise exclusive or”, equivalent to …\nPerform the “bitwise exclusive or”, equivalent to …\nImmutably borrows the wrapped value.\nTransmutes a slice of owned FFI pointers to <code>&amp;[PyObject]</code>. …\nTransmutes an FFI pointer to <code>&amp;PyObject</code>. Undefined behavior …\nMutably borrows the wrapped value.\nCalls the object. This is equivalent to the Python …\nCalls the object. This is equivalent to the Python …\nCalls a function in the module. This is equivalent to the …\nCalls the type object, thus creating a new instance. This …\nCalls a method on the object. This is equivalent to the …\nCalls a method on the object. This is equivalent to the …\nCasts the PyObject to a concrete Python object type. Fails …\nCasts the PyObject to a concrete Python object type. Fails …\nChecks if the current thread holds the GIL.\nEmpty an existing dictionary of all key-value pairs.\nEmpty an existing set of all values.\nCompares two Python objects.\nCompares two Python objects.\nReturn the concatenation of o1 and o2. Equivalent to …\nDetermine if the dictionary contains the specified key. …\nDetermine if o contains value. this is equivalent to the …\nDetermine if the set contains the specified value. This is …\nReturn a new dictionary that contains the same key-value …\nReturn the number of occurrences of value in o, that is, …\nGets the python string data in its underlying …\nGets the Python string data as byte slice.\nReturns a reference to the capsule data.\nReturns a reference to the capsule data.\nDeletes an item. This is equivalent to the Python …\nDeletes an item. This is equivalent to the Python …\nDeletes an item. This is equivalent to the Python …\nDelete the ith element of object o. Python statement …\nDelete the slice in sequence object o from i1 to i2. …\nDeletes an attribute. This is equivalent to the Python …\nDeletes an attribute. This is equivalent to the Python …\nReturn the dictionary object that implements module’s …\nDiscard a value This is equivalent to the Python …\nPerform combined division and modulo, equivalent to the …\nPerform combined division and modulo, equivalent to the …\nCast from PyObject to a concrete Python object type.\nCast from PyObject to a concrete Python object type.\nCreates an empty set\nRetrieves the empty tuple.\nEvaluates a Python expression in the given context and …\nThis module contains the python exception types.\nExtracts <code>Self</code> from the source <code>PyObject</code>.\nExtracts some type from the Python object. This is a …\nReturns <code>Ok(NoArgs)</code> if the input is an empty Python tuple. …\nRetrieves the current error from the Python interpreter’…\nGets the module filename.\nGets the module filename object.\nPerform the “floor division” operation, equivalent to …\nPerform the “floor division” operation, equivalent to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a PyObject instance for the given FFI pointer. …\nReturns None for null pointers; undefined behavior if the …\nCreates a new PyErr.\nConstructs a PyIterator from a Python iterator object.\nCreates a PyObject instance for the given FFI pointer. …\nCreates a PyObject instance for the given FFI pointer. …\nRetrieves the PyType instance for the given FFI pointer. …\nDepending on <code>val</code>, returns <code>py.True()</code> or <code>py.False()</code>.\nGets a member from the module. This is equivalent to the …\nReturns a shared reference to the data stored in the …\nThis is equivalent to the Python expression: ‘self[key]…\nThis is equivalent to the Python expression: ‘self[key]…\nGets an item from the dictionary. Returns None if the item …\nGets the item at the specified index.\nReturn the ith element of the Sequence. Equivalent to …\nGets the item at the specified index.\nGets the reference count of this Python object.\nReturn the slice of sequence object o between begin and …\nGets the Python type object for this object’s type.\nRetrieves the exception type.\nGets the Python type object for type T.\nRetrieves an attribute value. This is equivalent to the …\nRetrieves an attribute value. This is equivalent to the …\nDetermines whether this object has the given attribute. …\nDetermines whether this object has the given attribute. …\nRetrieves the hash code of the object. This is equivalent …\nRetrieves the hash code of the object. This is equivalent …\nRetrieves the contents of a capsule as a void pointer by …\nImport the Python module with the specified name.\nImport the Python module with the specified name.\nRetrieve the contents of a capsule pointing to some data …\nReturn the concatenation of o1 and o2 on success. …\nReturn the result of repeating sequence object o count …\nReturn the first index i for which o[i] == value. This is …\nInserts an item at the specified index.\nRetrieves the exception instance for this error. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>GILProtected</code>, returning the wrapped value.\nCasts the Python object to PyObject.\nGets the Python iterator object.\nConverts self into a Python object.\nConverts self into a Python object.\nDetermines whether this object is callable.\nDetermines whether this object is callable.\nReturn true if <code>obj</code> is an instance of <code>self</code>.\nTrue if this is None in Python.\nReturn true if <code>self</code> is a subtype of <code>b</code>.\nReturns whether the object is considered to be true. This …\nReturns whether the object is considered to be true. This …\nGets whether this boolean is <code>true</code>.\nReturns the list of (key,value) pairs in this dictionary.\nTakes an object and returns an iterator for it. This is …\nTakes an object and returns an iterator for it. This is …\nCreates an immutable reference which is not bound to …\nShift this value to the left by the specified number of …\nShift this value to the left by the specified number of …\nReturns the length of the sequence or mapping. This is …\nReturns the length of the sequence or mapping. This is …\nReturn the number of items in the dictionary. This is …\nGets the length of the list.\nReturns the number of objects in sequence. This is …\nReturn the number of items in the set This is equivalent …\nGets the length of the tuple.\nReturn a fresh list based on the Sequence.\nConverts the inner value by the given function.\nReturn true if the current exception matches the exception …\nPerform matrix multiplication, equivalent to the Python …\nPerform matrix multiplication, equivalent to the Python …\nReturn the remainder of dividing <code>self</code> by <code>other</code>, equivalent …\nReturn the remainder of dividing <code>self</code> by <code>other</code>, equivalent …\nPerform multiplication (self * other)\nPerform multiplication (self * other)\nGets the module name.\nGets the name of the PyType.\nPerform the negation of self (-self)\nPerform the negation of self (-self)\nCreates a new capsule from a raw void pointer\nCreates a new empty dictionary.\nConstruct a new list with the given elements.\nCreate a new module object with the <code>__name__</code> attribute set …\nCreates a new Python <code>float</code> object.\nCreates a new set from any iterable\nCreates a new Python string object.\nCreates a new Python byte string object. The byte string …\nConstruct a new tuple with the given elements.\nCreates a new instance of <code>GILProtected</code>.\nCreates a new PyErr of type <code>T</code>.\nCreates a new <code>PySharedRefCell</code> containing <code>value</code>.\nConvenience method to create a capsule for some data\nConstruct a new error, with the usual lazy initialization …\nCreates a new exception type with the given name, which …\nRetrieves the next item from an iterator. Returns <code>None</code> …\nNormalizes the error. This ensures that the exception …\nGets whether an error is present in the Python interpreter…\nPop a value This is equivalent to the Python expression …\nInvoke the ‘positive’ operation, equivalent to the …\nInvoke the ‘positive’ operation, equivalent to the …\nPerform exponentiation, equivalent to the Python …\nPerform exponentiation, equivalent to the Python …\nPerform exponentiation modulo an integer, mathematically …\nPerform exponentiation modulo an integer, mathematically …\nPrepares the use of Python in a free-threaded context.\nPrint a standard traceback to sys.stderr.\nPrint a standard traceback to sys.stderr.\nThe <code>PyTraceBack</code> object associated with the error.\nThe type of the exception. This should be either a <code>PyClass</code> …\nThe value of the exception.\nThis macro is used to parse a parameter list into a set of …\nMacro to retrieve a Python capsule pointing to an array of …\nMacro to retrieve a function pointer capsule.\nDefines new python extension class. A <code>py_class!</code> macro …\nDefines a new exception type.\nCreates a Python callable object that invokes a Rust …\nRetrieves the marker type that proves that the GIL was …\nReturn the result of repeating sequence object o count …\nCompute the string representation of self. This is …\nCompute the string representation of self. This is …\nWrites the error back to the Python interpreter’s global …\nCompares two Python objects.\nCompares two Python objects.\nShift this value to the right by the specified number of …\nShift this value to the right by the specified number of …\nExecutes one or more Python statements in the given …\n<code>serde</code> integration.\nSets an item value. This is equivalent to the Python …\nSets an item value. This is equivalent to the Python …\nSets an item value. This is equivalent to the Python …\nSets the item at the specified index.\nAssign object v to the ith element of o. Equivalent to …\nAssign the sequence object v to the slice in sequence …\nSets an attribute value. This is equivalent to the Python …\nSets an attribute value. This is equivalent to the Python …\nGets the underlying FFI pointer. Consumes <code>self</code> without …\nCompute the string representation of self. This is …\nCompute the string representation of self. This is …\nPerform subtraction (self - other)\nPerform subtraction (self - other)\nConvert this object to a float, equivalent to the builtin …\nConvert this object to a float, equivalent to the builtin …\nLosslessly convert this object to an integer index, as if …\nLosslessly convert this object to an integer index, as if …\nConvert this object to an integer, equivalent to the …\nConvert this object to an integer, equivalent to the …\nConverts self into a Python object.\nConvert the <code>PyString</code> into a Rust string.\nConvert the Python string data to a Rust string.\nConvert the <code>PyString</code> into a Rust string.\nConvert the Python string data to a Rust string.\nPerform the “true division” operation, equivalent to …\nPerform the “true division” operation, equivalent to …\nImmutably borrows the wrapped value, returning an error if …\nImmutably borrows the wrapped value.\nMutably borrows the wrapped value, returning an error if …\nMutably borrows the wrapped value.\nCreates an immutable reference which is not bound to …\nReturn a fresh tuple based on the Sequence.\nRetrieves the type object for this Python object type.\nCasts the PyObject to a concrete Python object type. …\nCasts the PyObject to a concrete Python object type. …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nGets the value of this float.\nIssue a warning message. May return a PyErr if …\nConverts self into a Python object and calls the specified …\nConverts self into a Python object and calls the specified …\nDescription of a python parameter; used for <code>parse_args()</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWhether the parameter is optional.\nName, with leading <code>r#</code> stripped.\nThe name of the parameter.\nParse argument list\nTrait implemented for possible element types of <code>PyBuffer</code>.\nAllows access to the underlying buffer used by a python …\nLike <code>std::mem::cell</code>, but only provides read-only access to …\nGets the buffer memory as a slice.\nGets the buffer memory as a slice.\nGets the buffer memory as a slice.\nGets the buffer memory as a slice.\nGets the pointer to the start of the buffer memory.\nCopies the specified slice into the buffer. If the buffer …\nCopies the specified slice into the buffer. If the buffer …\nCopies the buffer elements to the specified slice. If the …\nCopies the buffer elements to the specified slice. If the …\nGets the number of dimensions.\nA NUL terminated string in struct module style syntax …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the underlying buffer from the specified python object.\nGets a pointer to the specified item.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets whether the buffer is contiguous in C-style order …\nGets whether the element specified in the format string is …\nGets whether the buffer is contiguous in Fortran-style …\nGets the total number of items.\nGets the size of a single element, in bytes. Important …\n<code>item_size() * item_count()</code>. For contiguous arrays, this is …\nGets whether the underlying buffer is read-only.\nReturns an array of length <code>dimensions</code>. <code>shape()[i]</code> is the …\nReturns an array that holds, for each dimension, the …\nAn array of length ndim. If suboffsets[n] &gt;= 0, the values …\nCopies the buffer elements to a newly allocated vector. If …\nCopies the buffer elements to a newly allocated vector. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nUnchecked downcast from PyObject to Self. Undefined …\nA PythonObject that is usable as a base type with the …\nTrait implemented by the types produced by the <code>py_class!()</code> …\nInitializes the class and adds it to the module.\nAllocates a new object (usually by calling ty-&gt;tp_alloc), …\nCalls the rust destructor for the object and frees the …\nReturns the argument unchanged.\nInitializes the class.\nCalls <code>U::from(self)</code>.\nGets the size of the object, in bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nError type used by serialization.\nReturns the argument unchanged.\nDeserialize from Python object.\nCalls <code>U::from(self)</code>.\nSerialize into Python object.")